#include <stdio.h>
#include <stdlib.h>

/* Define the structure for a singly linked list node */
typedef struct listint_s {
int n;
struct listint_s *next;
} listint_t;

/**
 * check_cycle - Check if a singly linked list has a cycle.
 * @list: A pointer to the head of the linked list.
 * Return: 0 if there is no cycle, 1 if there is a cycle.
 */
int check_cycle(listint_t *list) {
/* Use two pointers, one moving twice as fast as the other */
listint_t *slow = list;
listint_t *fast = list;

/* Traverse the list until the end or a cycle is found */
while (fast != NULL && fast->next != NULL) {
slow = slow->next;         /* Move slow pointer by one step */
fast = fast->next->next;   /* Move fast pointer by two steps */

/* If there is a cycle, the two pointers will meet at some point */     if (slow == fast) {
return 1;  /* Cycle detected */
}
}

return 0;  /* No cycle found */
}

/* Example usage */
int main(void) {
/* Creating a linked list with a cycle for testing */
listint_t *head, *node1, *node2, *node3;

head = malloc(sizeof(listint_t));
node1 = malloc(sizeof(listint_t));
node2 = malloc(sizeof(listint_t));
node3 = malloc(sizeof(listint_t));

if (!head || !node1 || !node2 || !node3) {
perror("Memory allocation failed");
return EXIT_FAILURE;
}

head->n = 1;
head->next = node1;

node1->n = 2;
node1->next = node2;

node2->n = 3;
node2->next = node3;

node3->n = 4;
node3->next = node1;  /* Creating a cycle */

/* Call the check_cycle function */
if (check_cycle(head)) {
printf("Cycle detected\n");
} else {
printf("No cycle found\n");
}
/* Free allocated memory */
free(head);
free(node1);
free(node2);
free(node3);

return EXIT_SUCCESS;
}
